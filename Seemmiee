function fact(b)
    if b == 0 then
        return 1
    else
        return b * fact(b - 1)
    end
end
print("enter a number:")
a = io.read("*number")
print(fact(a))

return (function(
    l8,
    r8,
    h8,
    B8,
    u8,
    T8,
    K8,
    L8,
    G8,
    j8,
    i8,
    C8,
    t8,
    e8,
    D8,
    q8,
    d8,
    A8,
    z8,
    S8,
    m8,
    s8,
    F8,
    O8,
    v8,
    P8,
    k8,
    U8,
    N8,
    p8,
    Z8,
    y8,
    w8,
    g8,
    b8,
    X8,
    Y8,
    H8,
    W8,
    J,
    ...)
    local Q, a = v8, t8
    local E = (tostring)
    local x8, o, t, v, d = 0x3, nil, nil, nil, (nil)
    while x8 <= 0X003 do
        if x8 <= 0X1 then
            do
                if x8 ~= 0X0000 then
                    d = string.gsub
                    x8 = 4
                else
                    v = d8.char
                    x8 = 0X1
                end
            end
        elseif x8 == 2 then
            do
                t = d8.rep
            end
            x8 = 0
        else
            o = string.sub
            do
                x8 = 2
            end
        end
    end
    do
        x8 = 0X001
    end
    local F, i = nil, (nil)
    while x8 ~= 2 do
        do
            if x8 ~= 0 then
                do
                    F = F8
                end
                x8 = 0
            else
                i = q8
                x8 = 2
            end
        end
    end
    local r = (rawset)
    local A =

    local k = (bit or bit32)
    x8 = 0X1
    local M, f, p = nil, nil, nil
    while 1000398098 do
        if x8 <= 0X1 then
            if x8 == 0x00 then
                p = coroutine.yield
                do
                    x8 = 2
                end
            else
                M = i8
                x8 = 3
            end
        else
            if x8 == 0x2 then
                break
            else
                f = s8
                x8 = 0
            end
        end
    end
    local B = (getfenv)
    local W = (B and B() or _ENV)
    local R = r8
    x8 = 2
    local L, l, n8, Y = nil, nil, nil, (nil)
    repeat
        do
            if not (x8 <= 0X2) then
                do
                    if x8 <= 0x3 then
                        x8 = 0
                    else
                        if x8 ~= 4 then
                            A =
                                d(
                                o(A, 0X5),
                                h8,
                                function(iU)
                                    if R(iU, 2) == 72 then
                                        l = M(o(iU, 0X1, 1))
                                        return ""
                                    else
                                        local OX = (nil)
                                        local dX = 0X1
                                        do
                                            while dX <= 0X01 do
                                                if dX ~= 0X00 then
                                                    OX = v(M(iU, 0X10))
                                                    dX = 0
                                                else
                                                    if not (l) then
                                                        return OX
                                                    else
                                                        local dz = (nil)
                                                        for rL = 0, 0X02 do
                                                            do
                                                                if rL <= 0x0 then
                                                                    dz = t(OX, l)
                                                                else
                                                                    if rL ~= 1 then
                                                                        return dz
                                                                    else
                                                                        l = L8
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                    dX = 0X02
                                                end
                                            end
                                        end
                                    end
                                end
                            )
                            x8 = 0X06
                        else
                            Y = 1
                            x8 = 0X005
                        end
                    end
                end
            elseif x8 <= 0X0 then
                do
                    n8 = {}
                end
                do
                    x8 = 4
                end
            else
                if x8 ~= 0X1 then
                    x8 = 1
                else
                    L = coroutine.wrap
                    x8 = 3
                end
            end
        end
    until x8 >= 0X6
    do
        x8 = 0X0000
    end
    local c, H, G, K, P, D, e = nil, nil, nil, nil, nil, nil, nil
    while x8 ~= 7 do
        if not (x8 <= 2) then
            do
                if x8 <= 4 then
                    if x8 == 0x003 then
                        H = z8
                        x8 = 2
                    else
                        P = {1, 0X3, U8}
                        x8 = 6
                    end
                else
                    if x8 == 5 then
                        do
                            e = 0X2 ^ 52
                        end
                        x8 = 0x7
                    else
                        D = function()
                            local t_, u_, A_, M_ = nil, nil, nil, (nil)
                            local s_ = 0x2
                            repeat
                                if not (s_ <= 0X0) then
                                    if s_ ~= 0X1 then
                                        do
                                            t_, u_, A_, M_ = R(A, Y, Y + 0x3)
                                        end
                                        s_ = 0
                                    else
                                        return M_ * 16777216 + A_ * 65536 + u_ * 256 + t_
                                    end
                                else
                                    do
                                        Y = Y + 4
                                    end
                                    s_ = 0x00001
                                end
                            until (false)
                        end
                        x8 = 0X5
                    end
                end
            end
        else
            do
                if not (x8 <= 0X0000) then
                    if x8 ~= 0x00001 then
                        do
                            G = function()
                                local ai = (R(A, Y, Y))
                                local Ti = (0x0)
                                repeat
                                    do
                                        if Ti ~= 0X0 then
                                            return ai
                                        else
                                            Y = Y + 1
                                            Ti = 1
                                        end
                                    end
                                until (false)
                            end
                        end
                        x8 = 1
                    else
                        K = 0X080000000
                        x8 = 4
                    end
                else
                    do
                        c = p8
                    end
                    x8 = 3
                end
            end
        end
    end
    local Z, y = H - 1, (K - 1)
    local z, b = unpack or B8, (nil)
    do
        for kj = 0x0000, 1 do
            if kj == 0 then
                b = {[0X0] = 0x1}
            else
                do
                    local KZ = 0X00000
                    local jZ = (nil)
                    while 0.5803211776860295 do
                        if KZ == 0 then
                            do
                                jZ = 2
                            end
                            KZ = 1
                        else
                            for w9 = 0X1, W8 do
                                local b9 = 1
                                while b9 ~= 2 do
                                    if b9 ~= 0x0 then
                                        (b)[w9] = jZ
                                        b9 = 0
                                    else
                                        jZ = jZ * U8
                                        b9 = 0x00002
                                    end
                                end
                            end
                            do
                                break
                            end
                        end
                    end
                end
            end
        end
    end
    local m = (function(Mo, oo, no)
        local Ho = (Mo / b[oo]) % b[no]
        Ho = Ho - Ho % 1
        return Ho
    end)
    local C = (function()
        local Qx, Wx = D(), D()
        do
            for Vm = 0, 1 do
                do
                    if Vm == 0 then
                        if not (Wx >= K) then
                        else
                            do
                                Wx = Wx - H
                            end
                        end
                    else
                        return Wx * H + Qx
                    end
                end
            end
        end
    end)
    do
        x8 = 0x0
    end
    local w, S = nil, nil
    repeat
        do
            if x8 ~= 0X00 then
                S = function()
                    local es, bs, as, Ms, is, Ps = nil, nil, nil, nil, nil, (nil)
                    for Ov = 0, 0x008 do
                        if Ov <= 0x3 then
                            if not (Ov <= 1) then
                                if Ov ~= 0X0002 then
                                    as = (-1) ^ m(bs, 0x0001F, 1)
                                else
                                    if es == 0 and bs == 0X000 then
                                        return 0
                                    end
                                end
                            else
                                if Ov == 0 then
                                    es = D()
                                else
                                    bs = D()
                                end
                            end
                        else
                            if not (Ov <= 5) then
                                if Ov <= 0X006 then
                                    do
                                        Ps = m(bs, 0X000, 20) * H + es
                                    end
                                else
                                    if Ov ~= 7 then
                                        do
                                            return as * (0x00002 ^ (is - 0X3ff)) * (Ps / e + Ms)
                                        end
                                    else
                                        do
                                            if is == 0 then
                                                if Ps ~= 0X0 then
                                                    local fw = (0x1)
                                                    do
                                                        while fw ~= 2 do
                                                            if fw ~= 0X00 then
                                                                do
                                                                    is = D8
                                                                end
                                                                do
                                                                    fw = 0
                                                                end
                                                            else
                                                                Ms = 0
                                                                fw = 2
                                                            end
                                                        end
                                                    end
                                                else
                                                    return as * 0
                                                end
                                            elseif is == 0x0007Ff then
                                                if Ps == 0X00000 then
                                                    do
                                                        return as * (0 / 0X0)
                                                    end
                                                else
                                                    return as * (0x01 / 0)
                                                end
                                            end
                                        end
                                    end
                                end
                            elseif Ov ~= 4 then
                                do
                                    is = m(bs, m8, 0XB)
                                end
                            else
                                Ms = 1
                            end
                        end
                    end
                end
                x8 = 2
            else
                w = {
                    [0] = {[0] = 0x00000, 1, 2, 0X3, 0X4, 5, 0X006, 7, 0X08, 9, Y8, 11, 0xc, 0X0d, 14, A8},
                    {[0] = 1, 0, 0X3, 2, 0X5, 4, 7, 6, 9, 0x8, 11, Y8, 13, 0X0c, 15, 0Xe},
                    {[0] = 2, 3, 0X0000, 1, 0X006, 7, 4, 5, 0XA, 11, 8, 0x9, 0X00E, 15, 12, 0X0000d},
                    {[0] = 0X3, 2, 1, 0, 7, 6, 5, 0X4, 0x00B, 10, 0x9, 8, A8, 0X000E, 13, 12},
                    {[0] = 0x4, 0X5, 0X0006, 7, 0X0, 0x1, 0X2, 0X003, 12, 0Xd, 14, 0XF, l8, 0x9, 0XA, 0X000B},
                    {[0X00] = 5, G8, 7, 6, D8, 0, 0X03, 0X2, 0xd, K8, 0X000F, 0X00e, 0x0009, 8, 11, 10},
                    {[0] = 0x006, 0X07, 0x4, 5, 0X0002, 3, H8, 0X1, 14, 0X0f, 0XC, 13, 0xA, 11, 0X008, 0X09},
                    {[H8] = e8, 0X6, 5, 0X04, 0X003, 2, 0X00001, 0X00000, 15, 14, 0X0d, 0Xc, 11, 10, 9, 8},
                    {[H8] = 0X8, 9, 0xA, 11, K8, 13, 0X0000E, 15, 0, 1, 0X0002, 0x3, 4, 5, 0X6, 7},
                    {[0x000] = 0X9, 0x8, 11, 10, 0Xd, 0xc, 0X0000f, 0xe, D8, 0X000, 3, 2, 0X5, 0X0004, e8, 6},
                    {[0] = 10, 11, 0X8, 9, 0xe, 15, 12, 0xd, 0X2, 3, 0x0, 1, 6, 0X00007, 0X4, 5},
                    {[0] = 0XB, 10, 0X09, 8, 0XF, 14, 13, 0X0000c, 0X3, 0X002, 0X1, H8, 0x0007, 6, 0X0005, 0X00004},
                    {[0X0000] = 0Xc, 0xd, 14, A8, l8, 0x00009, 10, 11, 4, 0x5, 6, 7, 0X0, 1, 2, 3},
                    {[0] = 13, 0xC, 15, 14, 0x9, 8, 0XB, 10, 5, 0X00004, 7, 6, 1, 0X00, 0X3, 2},
                    {[0] = 0xE, 0Xf, K8, 0XD, 10, 11, 8, 0X9, Z8, 0X7, 4, y8, U8, 3, 0X0, 0X1},
                    {[0] = 0xF, b8, 0Xd, 0Xc, 0XB, 0xA, 0X9, 8, 7, 6, 0X5, 4, 3, U8, 1, 0}
                }
                x8 = 0x01
            end
        end
    until x8 > 0X1
    local O = k and k.bxor or function(bV, VV)
            local JV = 0X00003
            local uV, MV = nil, nil
            repeat
                do
                    if not (JV <= 2) then
                        if not (JV <= 0x3) then
                            if JV == 0X4 then
                                do
                                    MV = 0
                                end
                                JV = 0X1
                            else
                                uV = 0X1
                                JV = 0X4
                            end
                        else
                            bV = bV % H
                            JV = 2
                        end
                    else
                        if not (JV <= 0x0) then
                            if JV == 1 then
                                while bV > H8 and VV > H8 do
                                    local q0, D0, A0 = bV % 0X000010, 1, (nil)
                                    while D0 <= 0x004 do
                                        if not (D0 <= 1) then
                                            do
                                                if D0 <= 0X2 then
                                                    VV = (VV - A0) / 16
                                                    D0 = 4
                                                else
                                                    do
                                                        if D0 == 3 then
                                                            bV = (bV - q0) / 0x10
                                                            do
                                                                D0 = 0X2
                                                            end
                                                        else
                                                            uV = uV * 16
                                                            D0 = 5
                                                        end
                                                    end
                                                end
                                            end
                                        else
                                            if D0 == 0X0 then
                                                MV = MV + w[q0][A0] * uV
                                                do
                                                    D0 = 0X3
                                                end
                                            else
                                                A0 = VV % 0X0010
                                                D0 = 0
                                            end
                                        end
                                    end
                                end
                                JV = 0x0
                            else
                                VV = VV % H
                                JV = 5
                            end
                        else
                            return MV + bV * uV + VV * uV
                        end
                    end
                end
            until false
        end
    local j = (k and k.band or function(Av, Bv)
            local Mv = (0x0)
            do
                while 0.008001478802339812 do
                    if Mv ~= 0X0 then
                        Bv = Bv % H
                        break
                    else
                        Av = Av % H
                        Mv = 0x001
                    end
                end
            end
            return ((Av + Bv) - O(Av, Bv)) / 2
        end)
    local N = (k and k.bor or function(Th, Vh)
            local ph = (2)
            while "Ga" do
                if not (ph <= 0X000) then
                    do
                        if ph == 0x00001 then
                            Vh = Vh % H
                            ph = 0
                        else
                            Th = Th % H
                            ph = 0X01
                        end
                    end
                else
                    return Z - j(Z - Th, Z - Vh)
                end
            end
        end)
    local X = k and k[C8] or function(NW)
            return Z - (NW % H)
        end
    do
        x8 = 0x0
    end
    local T, g = nil, (nil)
    do
        while x8 ~= 2 do
            if x8 == 0X000 then
                do
                    T = k and k[S8]
                end
                do
                    x8 = 0X1
                end
            else
                g = k and k[w8]
                x8 = 2
            end
        end
    end
    x8 = 0X2
    local q, x, h, u = nil, nil, nil, (nil)
    while x8 ~= 6 do
        if not (x8 <= 2) then
            do
                if not (x8 <= 3) then
                    if x8 == 4 then
                        h = k8
                        do
                            x8 = 0x5
                        end
                    else
                        do
                            u = {
                                [0X00009] = 1,
                                [0X0003] = G8,
                                [D8] = y8,
                                [0X4] = 0X6,
                                [O8] = 6,
                                [5] = 0,
                                [0X4] = 6,
                                [0X9] = 0,
                                [9] = 0X0,
                                [2] = 7
                            }
                        end
                        x8 = 0X00006
                    end
                else
                    x = function()
                        local kV, UV = 0X0, 0x0
                        while 0.42429103113646816 do
                            local Ze = (R(A, Y, Y))
                            Y = Y + 0X01
                            kV = N(kV, T(j(Ze, 0X07F), UV))
                            if j(Ze, 128) == 0X00 then
                                do
                                    return kV
                                end
                            end
                            UV = UV + 7
                        end
                    end
                    x8 = 4
                end
            end
        else
            do
                if not (x8 <= 0x0000) then
                    if x8 ~= 1 then
                        q = table.insert
                        do
                            x8 = 0X0000
                        end
                    else
                        g = g or function(V8, jq)
                                local Lq = nil
                                for aY = 0X00000, 3 do
                                    if not (aY <= 1) then
                                        if aY == 2 then
                                            Lq = (V8 % H / b[jq])
                                        else
                                            return Lq - Lq % 1
                                        end
                                    else
                                        do
                                            if aY == 0x0 then
                                                if jq >= 32 then
                                                    do
                                                        return 0X0
                                                    end
                                                end
                                            else
                                                if not (jq < 0) then
                                                else
                                                    do
                                                        return T(V8, -jq)
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        x8 = 3
                    end
                else
                    T = T or function(ID, aD)
                            for VR = 0x0, 0X002 do
                                if not (VR <= 0) then
                                    if VR == 1 then
                                        if aD < 0 then
                                            return g(ID, -aD)
                                        end
                                    else
                                        return (ID * b[aD]) % H
                                    end
                                else
                                    do
                                        if aD >= 32 then
                                            return 0x0
                                        end
                                    end
                                end
                            end
                        end
                    x8 = 1
                end
            end
        end
    end
    local V = (function()
        local Hr = (nil)
        do
            for fs = 0x0, 1 do
                if fs ~= 0x0 then
                    if Hr > y then
                        return Hr - H
                    end
                else
                    Hr = x()
                end
            end
        end
        return Hr
    end)
    local J8 = (G())
    local I8 = G()
    local Q8, a8, M8, f8, E8 = nil, nil, nil, nil, nil
    for vs = 0X0, 0x0004 do
        if vs <= 0X1 then
            if vs ~= 0X000 then
                a8 = function(...)
                    do
                        return Q(X8, ...), {...}
                    end
                end
            else
                Q8 = function(vu)
                    local hu, Zu, tu, Vu, Ou = nil, nil, nil, nil, (nil)
                    for Fk = 0X0, 0X7 do
                        if Fk <= 0X0003 then
                            if not (Fk <= 1) then
                                if Fk == 0X2 then
                                    tu = O(hu[0X2], I8)
                                else
                                    do
                                        Vu = O(hu[0x003], I8)
                                    end
                                end
                            else
                                if Fk == 0 then
                                    hu = {R(A, Y, Y + j8)}
                                else
                                    Zu = O(hu[1], I8)
                                end
                            end
                        elseif Fk <= 0X5 then
                            if Fk ~= 4 then
                                I8 = (221 * I8 + vu) % 0X100
                            else
                                Ou = O(hu[0X4], I8)
                            end
                        else
                            if Fk == 6 then
                                Y = Y + 0X004
                            else
                                return Ou * 16777216 + Vu * 65536 + tu * N8 + Zu
                            end
                        end
                    end
                end
            end
        else
            do
                if not (vs <= 2) then
                    do
                        if vs == 0X3 then
                            f8 = 0X01
                        else
                            E8 = {}
                        end
                    end
                else
                    M8 = function(Gd)
                        local wd = (D())
                        local bd = ("")
                        for tX = 1, wd, T8 do
                            local hX = tX + 7997 - 0X01
                            if hX > wd then
                                do
                                    hX = wd
                                end
                            end
                            local jX, QX = 0, (nil)
                            while jX <= 0x02 do
                                do
                                    if not (jX <= 0) then
                                        if jX ~= 0X00001 then
                                            for vm = 0X1, #QX do
                                                for SH = 0, 0x00001 do
                                                    if SH == 0 then
                                                        QX[vm] = O(QX[vm], J8)
                                                    else
                                                        do
                                                            J8 = (Gd * J8 + g8) % 256
                                                        end
                                                    end
                                                end
                                            end
                                            jX = 0X1
                                        else
                                            bd = bd .. v(z(QX))
                                            jX = 0X00003
                                        end
                                    else
                                        QX = {R(A, Y + tX - 1, Y + hX - 0X01)}
                                        jX = 0X0002
                                    end
                                end
                            end
                        end
                        Y = Y + wd
                        do
                            return bd
                        end
                    end
                end
            end
        end
    end
    local U = setfenv
    local s = (rawget)
    x8 = 0
    local c8 = nil
    do
        repeat
            do
                if x8 == 0 then
                    x8 = 1
                else
                    function c8(ZI, hI, wI)
                        local CI = (wI[5])
                        local aI, jI = wI[1], (wI[0X3])
                        local xI = (wI[0X8])
                        local tI, GI = wI[7], (wI[0X2])
                        local PI = wI[9]
                        local QI = i({}, {__mode = "v"})
                        local iI, qI = wI[0X6], (nil)
                        if iI < 2 then
                            if iI == 0x1 then
                                do
                                    qI = function(...)
                                        local tg = ({})
                                        local Cg = (0x0001)
                                        local Bg = (B and B() or _ENV)
                                        local Xg = (Bg == W and ZI or Bg)
                                        local dg, sg = a8(...)
                                        local eg = {[1] = tg, [2] = wI}
                                        dg = dg - 0X00001
                                        for E1 = 0X000, dg do
                                            do
                                                if tI > E1 then
                                                    (tg)[E1] = sg[E1 + 1]
                                                else
                                                    do
                                                        break
                                                    end
                                                end
                                            end
                                        end
                                        if not PI then
                                            sg = nil
                                        else
                                            if not (xI) then
                                            else
                                                do
                                                    tg[tI] = {
                                                        n = dg >= tI and dg - tI + 0x001 or 0,
                                                        z(sg, tI + 1, dg + 1)
                                                    }
                                                end
                                            end
                                        end
                                        do
                                            if Xg == Bg then
                                            else
                                                do
                                                    if not (U) then
                                                        _ENV = Xg
                                                    else
                                                        (U)(qI, Xg)
                                                    end
                                                end
                                            end
                                        end
                                        local Fg = (0)
                                        while "\116`Y\042" do
                                            local rW = aI[Cg]
                                            local kW = (rW[0x6])
                                            Cg = Cg + 1
                                            if kW < 7 then
                                                if not (kW >= 0X3) then
                                                    if not (kW >= 1) then
                                                        local S0 = rW[0X01]
                                                        local e0, M0 = tg[S0]()
                                                        if not (e0) then
                                                        else
                                                            do
                                                                Cg = rW[3]
                                                            end
                                                            tg[S0 + 0X3] = M0
                                                        end
                                                    else
                                                        if kW ~= 2 then
                                                            do
                                                                (tg)[rW[0X00001]] = -tg[rW[3]]
                                                            end
                                                        else
                                                            for Ej = rW[0X0001], rW[0x03] do
                                                                tg[Ej] = nil
                                                            end
                                                        end
                                                    end
                                                elseif kW >= 0X05 then
                                                    if kW == 0X6 then
                                                        (tg)[rW[0X1]] = true
                                                    else
                                                    end
                                                else
                                                    if kW == 0x4 then
                                                        local gb = (hI[0])
                                                        do
                                                            (tg)[0] = gb[1][gb[2]]
                                                        end
                                                        Cg = Cg + 0x00001
                                                        local mb = nil
                                                        Cg = Cg + 0x1
                                                        rW = aI[Cg]
                                                        Cg = Cg + 0x1
                                                        local wb = (0)
                                                        tg[0X0] = tg[0][rW[7]]
                                                        rW = aI[Cg]
                                                        Cg = Cg + 1
                                                        local Mb = tg[0]
                                                        (tg)[wb + 1] = Mb
                                                        tg[wb] = Mb[rW[7]]
                                                        rW = aI[Cg]
                                                        Cg = Cg + 0X1
                                                        local Kb = (jI[rW[0X0003]])
                                                        local kb = (Kb[4])
                                                        local Rb = #kb
                                                        if Rb > 0 then
                                                            do
                                                                mb = {}
                                                            end
                                                            for RC = 0X1, Rb do
                                                                local PC = kb[RC]
                                                                if PC[1] == 0X0 then
                                                                    do
                                                                        (mb)[RC - 0x1] = {tg, PC[0x2]}
                                                                    end
                                                                else
                                                                    mb[RC - 0X00001] = hI[PC[2]]
                                                                end
                                                            end
                                                            q(QI, mb)
                                                        end
                                                        do
                                                            tg[2] = c8(Xg, mb, Kb)
                                                        end
                                                        Cg = Cg + 1
                                                        wb = 0x0
                                                        tg[wb](tg[wb + 1], tg[wb + 0x02])
                                                        do
                                                            Fg = wb - 1
                                                        end
                                                        do
                                                            Cg = Cg + 0X1
                                                        end
                                                        Cg = Cg + 0x001
                                                        Cg = Cg + 0X1
                                                        do
                                                            repeat
                                                                local Gl, Vl = QI, (tg)
                                                                if not (#Gl > 0) then
                                                                else
                                                                    local op = ({})
                                                                    for fI, KI in h, Gl do
                                                                        for Q7, Z7 in h, KI do
                                                                            if Z7[1] == Vl and Z7[2] >= 0X00000 then
                                                                                local RJ = (Z7[0X2])
                                                                                do
                                                                                    if not op[RJ] then
                                                                                        (op)[RJ] = {Vl[RJ]}
                                                                                    end
                                                                                end
                                                                                do
                                                                                    Z7[0X1] = op[RJ]
                                                                                end
                                                                                (Z7)[0X2] = 0X1
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            until true
                                                        end
                                                        return
                                                    else
                                                        (eg)[rW[3]] = tg[rW[1]]
                                                    end
                                                end
                                            else
                                                if kW >= 10 then
                                                    if not (kW < 12) then
                                                        if kW == 13 then
                                                            Cg = rW[3]
                                                        else
                                                            tg[rW[1]] = {z({}, 1, rW[0X0003])}
                                                        end
                                                    else
                                                        do
                                                            if kW ~= 11 then
                                                                (tg)[rW[1]] = rW[4]
                                                            else
                                                                do
                                                                    tg[rW[1]] = Xg[rW[0x4]]
                                                                end
                                                            end
                                                        end
                                                    end
                                                else
                                                    do
                                                        if kW >= 8 then
                                                            if kW ~= 9 then
                                                                if not (tg[rW[0X3]] < tg[rW[0x02]]) then
                                                                    Cg = rW[1]
                                                                end
                                                            else
                                                                (tg)[rW[0X001]] = tg[rW[3]] * tg[rW[2]]
                                                            end
                                                        else
                                                            local mY = (jI[rW[3]])
                                                            local nY = mY[4]
                                                            local WY = (nil)
                                                            local oY = (#nY)
                                                            do
                                                                if not (oY > 0) then
                                                                else
                                                                    WY = {}
                                                                    do
                                                                        for fX = 1, oY do
                                                                            local sX = nY[fX]
                                                                            if sX[0X1] == 0 then
                                                                                do
                                                                                    WY[fX - 1] = {tg, sX[0X00002]}
                                                                                end
                                                                            else
                                                                                (WY)[fX - 1] = hI[sX[0X0002]]
                                                                            end
                                                                        end
                                                                    end
                                                                    (q)(QI, WY)
                                                                end
                                                            end
                                                            (tg)[rW[1]] = c8(Xg, WY, mY)
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            else
                                qI = function(...)
                                    local k9, l9 = {}, (0)
                                    local N9 = (1)
                                    local x9 = ({[2] = wI, [1] = k9})
                                    local J9 = (B and B() or _ENV)
                                    local D9 = (J9 == W and ZI or J9)
                                    local B9, W9 = a8(...)
                                    B9 = B9 - 0X1
                                    for lv = 0X00000, B9 do
                                        if not (tI > lv) then
                                            do
                                                break
                                            end
                                        else
                                            (k9)[lv] = W9[lv + 0X1]
                                        end
                                    end
                                    do
                                        if not PI then
                                            W9 = nil
                                        else
                                            if xI then
                                                k9[tI] = {n = B9 >= tI and B9 - tI + 1 or 0, z(W9, tI + 0X1, B9 + 1)}
                                            end
                                        end
                                    end
                                    if D9 == J9 then
                                    else
                                        do
                                            if not (U) then
                                                do
                                                    _ENV = D9
                                                end
                                            else
                                                (U)(qI, D9)
                                            end
                                        end
                                    end
                                    while 514883900 do
                                        local Mi = aI[N9]
                                        local Gi = Mi[0X6]
                                        N9 = N9 + 1
                                        if Gi < 0X0002E then
                                            do
                                                if Gi < 23 then
                                                    do
                                                        if not (Gi < 0XB) then
                                                            if Gi < 17 then
                                                                if Gi >= 0X00e then
                                                                    if Gi < 15 then
                                                                        do
                                                                            k9[Mi[1]] = #k9[Mi[3]]
                                                                        end
                                                                    else
                                                                        if Gi ~= 16 then
                                                                            if k9[Mi[0X3]] <= k9[Mi[0x2]] then
                                                                                N9 = Mi[1]
                                                                            end
                                                                        else
                                                                            if Mi[2] == 105 then
                                                                                N9 = N9 - 1
                                                                                aI[N9] = {
                                                                                    [0x00006] = 39,
                                                                                    [3] = (Mi[0X3] - 0X000061),
                                                                                    [1] = (Mi[1] - 0X0061)
                                                                                }
                                                                            else
                                                                                repeat
                                                                                    local oT, RT = QI, k9
                                                                                    if #oT > 0 then
                                                                                        local i6 = {}
                                                                                        for tR, OR in h, oT do
                                                                                            for GD, JD in h, OR do
                                                                                                if
                                                                                                    JD[1] == RT and
                                                                                                        JD[0X2] >= 0X0
                                                                                                 then
                                                                                                    local IY =
                                                                                                        JD[0x00002]
                                                                                                    do
                                                                                                        if
                                                                                                            not (not i6[
                                                                                                                IY
                                                                                                            ])
                                                                                                         then
                                                                                                        else
                                                                                                            (i6)[IY] = {
                                                                                                                RT[IY]
                                                                                                            }
                                                                                                        end
                                                                                                    end
                                                                                                    JD[1] = i6[IY]
                                                                                                    do
                                                                                                        (JD)[2] = 1
                                                                                                    end
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    end
                                                                                until 0.056154477401522906
                                                                                return k9[Mi[1]]
                                                                            end
                                                                        end
                                                                    end
                                                                else
                                                                    if Gi >= 12 then
                                                                        if Gi ~= 0X0000d then
                                                                            k9[Mi[1]] = g(k9[Mi[0X0003]], k9[Mi[0X2]])
                                                                        else
                                                                            (k9)[Mi[0X00001]] = Mi[4]
                                                                        end
                                                                    elseif Mi[2] == 0X00003a then
                                                                        N9 = N9 - 0x1
                                                                        aI[N9] = {
                                                                            [0X1] = (Mi[0X1] - 0X00071),
                                                                            [3] = (Mi[3] - 0X000071),
                                                                            [6] = 16
                                                                        }
                                                                    else
                                                                        if not (k9[Mi[1]]) then
                                                                        else
                                                                            do
                                                                                N9 = Mi[3]
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            else
                                                                if not (Gi < 20) then
                                                                    if Gi >= 21 then
                                                                        if Gi == 22 then
                                                                            do
                                                                                if Mi[2] == 48 then
                                                                                    N9 = N9 - 0X01
                                                                                    do
                                                                                        (aI)[N9] = {
                                                                                            [3] = (Mi[3] - 0xCb),
                                                                                            [6] = 77,
                                                                                            [0X1] = (Mi[1] - 203)
                                                                                        }
                                                                                    end
                                                                                else
                                                                                    local fr = Mi[0X1]
                                                                                    for F3 = fr, fr + (Mi[0X3] - 1) do
                                                                                        (k9)[F3] =
                                                                                            W9[tI + (F3 - fr) + 0X1]
                                                                                    end
                                                                                end
                                                                            end
                                                                        else
                                                                            local QE = (Mi[1])
                                                                            k9[QE] = k9[QE](k9[QE + 1], k9[QE + 2])
                                                                            l9 = QE
                                                                        end
                                                                    else
                                                                        do
                                                                            (x9)[Mi[0X3]] = k9[Mi[1]]
                                                                        end
                                                                    end
                                                                else
                                                                    do
                                                                        if not (Gi < 0X12) then
                                                                            do
                                                                                if Gi == 19 then
                                                                                    do
                                                                                        l9 = Mi[0X1]
                                                                                    end
                                                                                    k9[l9]()
                                                                                    l9 = l9 - 1
                                                                                else
                                                                                    (k9)[Mi[1]] = k9[Mi[3]][k9[Mi[2]]]
                                                                                end
                                                                            end
                                                                        else
                                                                            local X7, H7 = Mi[1], ((Mi[2] - 1) * 50)
                                                                            local q7 = k9[X7]
                                                                            for zL = 0X001, Mi[3] do
                                                                                do
                                                                                    q7[H7 + zL] = k9[X7 + zL]
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        else
                                                            do
                                                                if Gi >= 5 then
                                                                    if Gi < 8 then
                                                                        if not (Gi >= 6) then
                                                                            local X2 = Mi[0X01]
                                                                            (k9[X2])(k9[X2 + 1], k9[X2 + 0X002])
                                                                            l9 = X2 - 1
                                                                        else
                                                                            if Gi ~= 7 then
                                                                                do
                                                                                    k9[Mi[1]][k9[Mi[3]]] = Mi[7]
                                                                                end
                                                                            else
                                                                                local d6, b6 = Mi[0X3], Mi[0X2]
                                                                                local R6 = (Mi[0X1])
                                                                                if d6 ~= 0X0 then
                                                                                    l9 = R6 + d6 - 1
                                                                                end
                                                                                local p6, e6 = nil, (nil)
                                                                                if d6 ~= 0X1 then
                                                                                    do
                                                                                        p6, e6 =
                                                                                            a8(
                                                                                            k9[R6](z(k9, R6 + 0X1, l9))
                                                                                        )
                                                                                    end
                                                                                else
                                                                                    p6, e6 = a8(k9[R6]())
                                                                                end
                                                                                if b6 ~= 1 then
                                                                                    do
                                                                                        if b6 == 0X00 then
                                                                                            p6 = p6 + R6 - 1
                                                                                            l9 = p6
                                                                                        else
                                                                                            do
                                                                                                p6 = R6 + b6 - 0x02
                                                                                            end
                                                                                            l9 = p6 + 0X1
                                                                                        end
                                                                                    end
                                                                                    local zM = (0)
                                                                                    for V8 = R6, p6 do
                                                                                        zM = zM + 0X0001
                                                                                        do
                                                                                            k9[V8] = e6[zM]
                                                                                        end
                                                                                    end
                                                                                else
                                                                                    do
                                                                                        l9 = R6 - 0X00001
                                                                                    end
                                                                                end
                                                                            end
                                                                        end
                                                                    else
                                                                        if not (Gi >= 9) then
                                                                            if Mi[0X2] ~= 195 then
                                                                                if not k9[Mi[1]] then
                                                                                    N9 = Mi[3]
                                                                                end
                                                                            else
                                                                                N9 = N9 - 1
                                                                                aI[N9] = {
                                                                                    [0x006] = 0X0004d,
                                                                                    [0x3] = (Mi[0X00003] - 0X0000De),
                                                                                    [0X001] = (Mi[1] - 0x0de)
                                                                                }
                                                                            end
                                                                        else
                                                                            if Gi ~= 10 then
                                                                                (k9)[Mi[1]] = k9[Mi[3]] ~= k9[Mi[2]]
                                                                            else
                                                                                do
                                                                                    k9[Mi[0X0001]] = false
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                elseif Gi < 2 then
                                                                    do
                                                                        if Gi ~= 0X0001 then
                                                                            k9[Mi[0X0001]] = T(k9[Mi[3]], k9[Mi[2]])
                                                                        else
                                                                            local cj = Mi[1]
                                                                            l9 = cj + Mi[3] - 1
                                                                            do
                                                                                (k9)[cj] = k9[cj](z(k9, cj + 1, l9))
                                                                            end
                                                                            do
                                                                                l9 = cj
                                                                            end
                                                                        end
                                                                    end
                                                                else
                                                                    if not (Gi < 0X3) then
                                                                        if Gi == 4 then
                                                                            k9[Mi[1]] = k9[Mi[0X3]] % k9[Mi[0X2]]
                                                                        else
                                                                            (k9)[Mi[0X1]] = E8[Mi[3]]
                                                                        end
                                                                    else
                                                                        local y4 = (Mi[1])
                                                                        local r4, p4 = k9[y4]()
                                                                        if not (r4) then
                                                                        else
                                                                            (k9)[y4 + 0X1] = p4
                                                                            N9 = Mi[0X3]
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                else
                                                    do
                                                        if Gi < 34 then
                                                            if Gi >= 28 then
                                                                if not (Gi >= 0X1f) then
                                                                    do
                                                                        if not (Gi >= 29) then
                                                                            local WL = Mi[0X3]
                                                                            local wL = k9[WL]
                                                                            do
                                                                                for yd = WL + 0X1, Mi[0X00002] do
                                                                                    wL = wL .. k9[yd]
                                                                                end
                                                                            end
                                                                            k9[Mi[1]] = wL
                                                                        else
                                                                            if Gi ~= 30 then
                                                                                do
                                                                                    (E8)[Mi[3]] = k9[Mi[0X1]]
                                                                                end
                                                                            else
                                                                                N9 = Mi[0X0003]
                                                                            end
                                                                        end
                                                                    end
                                                                else
                                                                    if Gi < 0x00020 then
                                                                        (k9)[Mi[0X1]] = k9[Mi[3]] % Mi[0X7]
                                                                    else
                                                                        if Gi ~= 33 then
                                                                            k9[Mi[0X1]] = k9[Mi[3]]
                                                                        else
                                                                            k9[Mi[0X0001]] = k9[Mi[3]] + k9[Mi[2]]
                                                                        end
                                                                    end
                                                                end
                                                            else
                                                                if Gi >= 25 then
                                                                    if Gi < 26 then
                                                                        (k9)[Mi[0x1]] = not k9[Mi[3]]
                                                                    else
                                                                        if Gi ~= 0X1b then
                                                                            local AT, CT = Mi[0X0001], (k9[Mi[0X3]])
                                                                            (k9)[AT + 1] = CT
                                                                            k9[AT] = CT[Mi[0X7]]
                                                                        else
                                                                            local An = (Mi[1])
                                                                            do
                                                                                (k9)[An] = k9[An](z(k9, An + 1, l9))
                                                                            end
                                                                            l9 = An
                                                                        end
                                                                    end
                                                                else
                                                                    do
                                                                        if Gi ~= 24 then
                                                                            local Bp = (Mi[0X1])
                                                                            (k9[Bp])(z(k9, Bp + 0X01, l9))
                                                                            l9 = Bp - 0X1
                                                                        else
                                                                            do
                                                                                k9[Mi[1]] = x9[Mi[0x03]]
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        else
                                                            if not (Gi < 0X28) then
                                                                if not (Gi >= 43) then
                                                                    do
                                                                        if Gi >= 0X29 then
                                                                            if Gi ~= 42 then
                                                                                if
                                                                                    not (not (k9[Mi[0X3]] <
                                                                                        k9[Mi[0x0002]]))
                                                                                 then
                                                                                else
                                                                                    N9 = Mi[1]
                                                                                end
                                                                            else
                                                                                if k9[Mi[0X3]] == k9[Mi[2]] then
                                                                                else
                                                                                    N9 = Mi[1]
                                                                                end
                                                                            end
                                                                        else
                                                                            local JS = Mi[1]
                                                                            local tS, IS, HS = k9[JS]()
                                                                            if tS then
                                                                                do
                                                                                    (k9)[JS + 1] = IS
                                                                                end
                                                                                (k9)[JS + 0X2] = HS
                                                                                N9 = Mi[3]
                                                                            end
                                                                        end
                                                                    end
                                                                else
                                                                    if Gi < 0X00002c then
                                                                        k9[Mi[0x01]] = k9[Mi[3]] < k9[Mi[2]]
                                                                    else
                                                                        if Gi == 45 then
                                                                            do
                                                                                l9 = Mi[0X1]
                                                                            end
                                                                            k9[l9] = k9[l9]()
                                                                        else
                                                                            local T9 = hI[Mi[0X003]]
                                                                            k9[Mi[0x00001]] = T9[0X1][T9[2]]
                                                                        end
                                                                    end
                                                                end
                                                            else
                                                                if Gi < 0X25 then
                                                                    if Gi >= 35 then
                                                                        if Gi ~= 36 then
                                                                            local ml = Mi[3]
                                                                            (k9)[Mi[0X1]] = k9[ml] .. k9[ml + 1]
                                                                        else
                                                                            if k9[Mi[3]] ~= k9[Mi[2]] then
                                                                            else
                                                                                N9 = Mi[0X001]
                                                                            end
                                                                        end
                                                                    else
                                                                        do
                                                                            repeat
                                                                                local UU, sU = QI, (k9)
                                                                                if not (#UU > 0X0) then
                                                                                else
                                                                                    local gA = ({})
                                                                                    for pM, VM in h, UU do
                                                                                        for g5, t5 in h, VM do
                                                                                            do
                                                                                                if
                                                                                                    not (t5[1] == sU and
                                                                                                        t5[2] >= 0X0)
                                                                                                 then
                                                                                                else
                                                                                                    local Ec = (t5[2])
                                                                                                    do
                                                                                                        if not gA[Ec] then
                                                                                                            (gA)[Ec] = {
                                                                                                                sU[Ec]
                                                                                                            }
                                                                                                        end
                                                                                                    end
                                                                                                    t5[1] = gA[Ec]
                                                                                                    t5[2] = 1
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    end
                                                                                end
                                                                            until true
                                                                        end
                                                                        return k9[Mi[0X00001]]()
                                                                    end
                                                                else
                                                                    do
                                                                        if not (Gi >= 38) then
                                                                            k9[Mi[0x1]] = {z({}, 1, Mi[0X3])}
                                                                        else
                                                                            if Gi ~= 0X27 then
                                                                                if Mi[0X2] ~= 238 then
                                                                                    repeat
                                                                                        local fV, mV = QI, (k9)
                                                                                        if #fV > 0X0 then
                                                                                            local Kp = ({})
                                                                                            for NE, QE in h, fV do
                                                                                                for Ky, gy in h, QE do
                                                                                                    do
                                                                                                        if
                                                                                                            gy[1] == mV and
                                                                                                                gy[2] >=
                                                                                                                    0X0000
                                                                                                         then
                                                                                                            local FZ =
                                                                                                                (gy[2])
                                                                                                            if
                                                                                                                not (not Kp[
                                                                                                                    FZ
                                                                                                                ])
                                                                                                             then
                                                                                                            else
                                                                                                                do
                                                                                                                    Kp[
                                                                                                                            FZ
                                                                                                                        ] = {
                                                                                                                        mV[
                                                                                                                            FZ
                                                                                                                        ]
                                                                                                                    }
                                                                                                                end
                                                                                                            end
                                                                                                            gy[1] =
                                                                                                                Kp[FZ]
                                                                                                            (gy)[0x2] =
                                                                                                                1
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    until true
                                                                                    do
                                                                                        return z(k9, Mi[1], l9)
                                                                                    end
                                                                                else
                                                                                    N9 = N9 - 1
                                                                                    (aI)[N9] = {
                                                                                        [0x6] = 14,
                                                                                        [1] = (Mi[1] - 0XA9),
                                                                                        [0X0003] = (Mi[3] - 0Xa9)
                                                                                    }
                                                                                end
                                                                            else
                                                                                if Mi[2] == 54 then
                                                                                    N9 = N9 - 1
                                                                                    (aI)[N9] = {
                                                                                        [0X0001] = (Mi[0x1] - 41),
                                                                                        [0X3] = (Mi[0X00003] - 0x000029),
                                                                                        [0x6] = 38
                                                                                    }
                                                                                else
                                                                                    do
                                                                                        (k9)[Mi[0x1]] = nil
                                                                                    end
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        else
                                            if Gi >= 0X45 then
                                                if not (Gi < 0X50) then
                                                    if not (Gi < 86) then
                                                        if Gi < 89 then
                                                            if not (Gi >= 0X00057) then
                                                                k9[Mi[1]][Mi[0X004]] = k9[Mi[0X0002]]
                                                            else
                                                                if Gi ~= 0X58 then
                                                                    if Mi[0x2] == 0X1D then
                                                                        N9 = N9 - 1
                                                                        (aI)[N9] = {
                                                                            [0x1] = (Mi[1] - 0X51),
                                                                            [0X03] = (Mi[0X3] - 81),
                                                                            [6] = 0X020
                                                                        }
                                                                    else
                                                                        do
                                                                            (k9)[Mi[0X001]] = W9[tI + 1]
                                                                        end
                                                                    end
                                                                else
                                                                    do
                                                                        k9[Mi[0X001]] = k9[Mi[3]] - k9[Mi[0X2]]
                                                                    end
                                                                end
                                                            end
                                                        else
                                                            if not (Gi >= 0X00005a) then
                                                                if k9[Mi[0X3]] == Mi[0X7] then
                                                                else
                                                                    do
                                                                        N9 = Mi[0X1]
                                                                    end
                                                                end
                                                            else
                                                                if Gi == 0X5b then
                                                                    local Pf = Mi[1]
                                                                    local cf = k9[Pf + 0X1]
                                                                    local wf = (k9[Pf + 0x2])
                                                                    local Kf = (k9[Pf])
                                                                    k9[Pf] =
                                                                        L(
                                                                        function()
                                                                            do
                                                                                for vr = Kf, cf, wf do
                                                                                    (p)(true, vr)
                                                                                end
                                                                            end
                                                                        end
                                                                    )
                                                                    N9 = Mi[3]
                                                                else
                                                                    local gv = (Mi[1])
                                                                    local vv =
                                                                        (L(
                                                                        function(...)
                                                                            p()
                                                                            for vM in ... do
                                                                                (p)(true, vM)
                                                                            end
                                                                        end
                                                                    ))
                                                                    (vv)(k9[gv], k9[gv + 1], k9[gv + 2])
                                                                    l9 = gv
                                                                    k9[gv] = vv
                                                                    N9 = Mi[3]
                                                                end
                                                            end
                                                        end
                                                    else
                                                        if Gi < 83 then
                                                            if Gi >= 0X000051 then
                                                                if Gi ~= 82 then
                                                                    local qe = (Mi[0X1])
                                                                    local Me, Ce = k9[qe]()
                                                                    if Me then
                                                                        do
                                                                            for JZ = 1, Mi[0X2] do
                                                                                do
                                                                                    (k9)[qe + JZ] = Ce[JZ]
                                                                                end
                                                                            end
                                                                        end
                                                                        N9 = Mi[0X3]
                                                                    end
                                                                else
                                                                    k9[Mi[0X1]] = {}
                                                                end
                                                            else
                                                                local Ei = Mi[1]
                                                                local Vi, Zi = k9[Ei], ((Mi[0X0002] - 1) * 0X0032)
                                                                do
                                                                    for Kt = 1, l9 - Ei do
                                                                        do
                                                                            (Vi)[Zi + Kt] = k9[Ei + Kt]
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        else
                                                            if Gi < 0x54 then
                                                                do
                                                                    k9[Mi[1]] = k9[Mi[0x3]][Mi[0X7]]
                                                                end
                                                            else
                                                                if Gi ~= 0X55 then
                                                                    local KP = (Mi[0x001])
                                                                    local OP =
                                                                        (L(
                                                                        function(...)
                                                                            (p)()
                                                                            for PV, zV, xV, yV, qV, NV, EV, mV, iV, eV in ... do
                                                                                p(
                                                                                    true,
                                                                                    {
                                                                                        PV,
                                                                                        zV,
                                                                                        xV,
                                                                                        yV,
                                                                                        qV,
                                                                                        NV,
                                                                                        EV,
                                                                                        mV,
                                                                                        iV,
                                                                                        eV
                                                                                    }
                                                                                )
                                                                            end
                                                                        end
                                                                    ))
                                                                    OP(k9[KP], k9[KP + 1], k9[KP + 0X2])
                                                                    do
                                                                        l9 = KP
                                                                    end
                                                                    do
                                                                        (k9)[KP] = OP
                                                                    end
                                                                    N9 = Mi[3]
                                                                else
                                                                    do
                                                                        (k9)[Mi[0X1]] = k9[Mi[3]] >= k9[Mi[0X2]]
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                elseif Gi < 74 then
                                                    do
                                                        if not (Gi >= 71) then
                                                            if Gi ~= 70 then
                                                                do
                                                                    k9[Mi[0X1]][Mi[4]] = Mi[7]
                                                                end
                                                            else
                                                                local ce = (Mi[1])
                                                                k9[ce](k9[ce + 0x1])
                                                                l9 = ce - 1
                                                            end
                                                        else
                                                            do
                                                                if Gi >= 72 then
                                                                    do
                                                                        if Gi ~= 73 then
                                                                            do
                                                                                if not (k9[Mi[0X3]] <= Mi[7]) then
                                                                                    N9 = Mi[0X1]
                                                                                end
                                                                            end
                                                                        else
                                                                            if Mi[0X02] == 69 then
                                                                                N9 = N9 - 1
                                                                                aI[N9] = {
                                                                                    [1] = (Mi[0x0001] - 184),
                                                                                    [3] = (Mi[0x3] - 184),
                                                                                    [0X6] = 16
                                                                                }
                                                                            elseif Mi[0X2] == 212 then
                                                                                N9 = N9 - 0x1
                                                                                do
                                                                                    aI[N9] = {
                                                                                        [3] = (Mi[3] - 0X7f),
                                                                                        [0X1] = (Mi[0x1] - 127),
                                                                                        [0X6] = 46
                                                                                    }
                                                                                end
                                                                            else
                                                                                repeat
                                                                                    local eJ, pJ, zJ = QI, k9, (Mi[1])
                                                                                    if #eJ > 0X000 then
                                                                                        local DI = ({})
                                                                                        for l2, C2 in h, eJ do
                                                                                            for Mk, Uk in h, C2 do
                                                                                                if
                                                                                                    Uk[1] == pJ and
                                                                                                        Uk[0X002] >= zJ
                                                                                                 then
                                                                                                    local H6 = (Uk[0X2])
                                                                                                    do
                                                                                                        if not DI[H6] then
                                                                                                            (DI)[H6] = {
                                                                                                                pJ[H6]
                                                                                                            }
                                                                                                        end
                                                                                                    end
                                                                                                    (Uk)[0x1] = DI[H6]
                                                                                                    Uk[2] = 1
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    end
                                                                                until true
                                                                            end
                                                                        end
                                                                    end
                                                                else
                                                                    local S3, X3 = B9 - tI, Mi[0X1]
                                                                    do
                                                                        if not (S3 < 0X00000) then
                                                                        else
                                                                            S3 = -0X1
                                                                        end
                                                                    end
                                                                    for Zh = X3, X3 + S3 do
                                                                        (k9)[Zh] = W9[tI + (Zh - X3) + 1]
                                                                    end
                                                                    l9 = X3 + S3
                                                                end
                                                            end
                                                        end
                                                    end
                                                else
                                                    if Gi >= 77 then
                                                        if Gi < 0X004e then
                                                            do
                                                                repeat
                                                                    local Od, Ud = QI, (k9)
                                                                    do
                                                                        if #Od > 0X0 then
                                                                            local C_ = ({})
                                                                            for Aj, jj in h, Od do
                                                                                for WC, uC in h, jj do
                                                                                    if
                                                                                        not (uC[1] == Ud and
                                                                                            uC[2] >= 0x0)
                                                                                     then
                                                                                    else
                                                                                        local mv = uC[2]
                                                                                        if not (not C_[mv]) then
                                                                                        else
                                                                                            C_[mv] = {Ud[mv]}
                                                                                        end
                                                                                        uC[1] = C_[mv]
                                                                                        do
                                                                                            uC[0X2] = 1
                                                                                        end
                                                                                    end
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                until true
                                                            end
                                                            return
                                                        else
                                                            if Gi == 0X00004F then
                                                                local Pa = Mi[0x1]
                                                                local Ma =
                                                                    (L(
                                                                    function(...)
                                                                        p()
                                                                        for D5, c5 in ... do
                                                                            p(true, D5, c5)
                                                                        end
                                                                    end
                                                                ))
                                                                (Ma)(k9[Pa], k9[Pa + 1], k9[Pa + 0X2])
                                                                l9 = Pa
                                                                (k9)[Pa] = Ma
                                                                N9 = Mi[3]
                                                            else
                                                                k9[Mi[1]] = k9[Mi[3]] <= k9[Mi[2]]
                                                            end
                                                        end
                                                    else
                                                        do
                                                            if Gi < 0X4b then
                                                                local YC = (Mi[1])
                                                                local JC, HC = k9[YC]()
                                                                do
                                                                    if JC then
                                                                        N9 = Mi[0X3]
                                                                        do
                                                                            k9[YC + 0X3] = HC
                                                                        end
                                                                    end
                                                                end
                                                            else
                                                                if Gi == 0X4C then
                                                                    k9[Mi[1]] = Mi[0X004]
                                                                else
                                                                    local cL = (Mi[1])
                                                                    l9 = cL + Mi[0X3] - 0X1
                                                                    (k9[cL])(z(k9, cL + 1, l9))
                                                                    l9 = cL - 0X1
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            else
                                                do
                                                    if Gi >= 57 then
                                                        do
                                                            if Gi >= 0X3f then
                                                                if Gi >= 66 then
                                                                    if Gi >= 67 then
                                                                        do
                                                                            if Gi == 0x000044 then
                                                                                (k9)[Mi[0x1]] = k9[Mi[0X003]] ~= Mi[7]
                                                                            else
                                                                                local ae = (Mi[0X00001])
                                                                                do
                                                                                    k9[ae] = k9[ae](k9[ae + 0X01])
                                                                                end
                                                                                l9 = ae
                                                                            end
                                                                        end
                                                                    else
                                                                        repeat
                                                                            local Tx, Mx = QI, k9
                                                                            if #Tx > 0 then
                                                                                local V8 = {}
                                                                                do
                                                                                    for XW, wW in h, Tx do
                                                                                        for Iq, xq in h, wW do
                                                                                            if
                                                                                                not (xq[1] == Mx and
                                                                                                    xq[2] >= 0)
                                                                                             then
                                                                                            else
                                                                                                local ka = xq[0X2]
                                                                                                do
                                                                                                    if not (not V8[ka]) then
                                                                                                    else
                                                                                                        V8[ka] = {
                                                                                                            Mx[ka]
                                                                                                        }
                                                                                                    end
                                                                                                end
                                                                                                (xq)[0x1] = V8[ka]
                                                                                                do
                                                                                                    (xq)[2] = 0x1
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    end
                                                                                end
                                                                            end
                                                                        until "Cd"
                                                                        local MR = (Mi[1])
                                                                        do
                                                                            return k9[MR](z(k9, MR + 1, l9))
                                                                        end
                                                                    end
                                                                else
                                                                    do
                                                                        if not (Gi >= 64) then
                                                                            do
                                                                                (k9)[Mi[1]] = -k9[Mi[0X3]]
                                                                            end
                                                                        else
                                                                            if Gi == 0X41 then
                                                                                k9[Mi[1]] = k9[Mi[0X0003]] ^ k9[Mi[2]]
                                                                            else
                                                                                do
                                                                                    k9[Mi[1]] =
                                                                                        k9[Mi[3]] * k9[Mi[0X0002]]
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            else
                                                                do
                                                                    if not (Gi < 0x3c) then
                                                                        if Gi >= 0X3d then
                                                                            if Gi == 0X3e then
                                                                                do
                                                                                    if Mi[0X2] == 184 then
                                                                                        N9 = N9 - 0x01
                                                                                        do
                                                                                            aI[N9] = {
                                                                                                [0x03] = (Mi[3] - 114),
                                                                                                [1] = (Mi[1] - 114),
                                                                                                [0X006] = 0X000047
                                                                                            }
                                                                                        end
                                                                                    elseif Mi[0X00002] == 23 then
                                                                                        N9 = N9 - 0X1
                                                                                        (aI)[N9] = {
                                                                                            [0X3] = (Mi[3] - 0x00005B),
                                                                                            [1] = (Mi[0X1] - 91),
                                                                                            [0x6] = 0X2E
                                                                                        }
                                                                                    else
                                                                                        for nd = Mi[0X1], Mi[3] do
                                                                                            k9[nd] = nil
                                                                                        end
                                                                                    end
                                                                                end
                                                                            else
                                                                                (k9)[Mi[1]] = true
                                                                            end
                                                                        else
                                                                            (k9)[Mi[0X1]] = k9[Mi[3]] > k9[Mi[2]]
                                                                        end
                                                                    elseif not (Gi < 0X00003A) then
                                                                        if Gi ~= 59 then
                                                                            if k9[Mi[3]] ~= Mi[0X0007] then
                                                                            else
                                                                                do
                                                                                    N9 = Mi[1]
                                                                                end
                                                                            end
                                                                        else
                                                                            local Gy = nil
                                                                            local ny = (jI[Mi[3]])
                                                                            local qy = (ny[0X004])
                                                                            local Uy = (#qy)
                                                                            if not (Uy > 0) then
                                                                            else
                                                                                do
                                                                                    Gy = {}
                                                                                end
                                                                                for U1 = 1, Uy do
                                                                                    local i1 = qy[U1]
                                                                                    do
                                                                                        if i1[1] == 0 then
                                                                                            (Gy)[U1 - 0X01] = {
                                                                                                k9,
                                                                                                i1[0x00002]
                                                                                            }
                                                                                        else
                                                                                            (Gy)[U1 - 1] = hI[i1[2]]
                                                                                        end
                                                                                    end
                                                                                end
                                                                                (q)(QI, Gy)
                                                                            end
                                                                            do
                                                                                k9[Mi[0X1]] = c8(D9, Gy, ny)
                                                                            end
                                                                        end
                                                                    else
                                                                        do
                                                                            k9[Mi[0x0001]] = k9[Mi[3]] / k9[Mi[2]]
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    else
                                                        do
                                                            if Gi < 0X33 then
                                                                if Gi < 48 then
                                                                    if Gi ~= 47 then
                                                                        if Mi[2] == 171 then
                                                                            N9 = N9 - 0X001
                                                                            (aI)[N9] = {
                                                                                [6] = 0x47,
                                                                                [1] = (Mi[0X1] - 218),
                                                                                [3] = (Mi[0x3] - 218)
                                                                            }
                                                                        elseif Mi[0x2] ~= 0X11 then
                                                                            repeat
                                                                                local Ct, Xt = QI, (k9)
                                                                                if not (#Ct > 0) then
                                                                                else
                                                                                    local sU = {}
                                                                                    do
                                                                                        for Tj, Sj in h, Ct do
                                                                                            for zQ, uQ in h, Sj do
                                                                                                if
                                                                                                    uQ[0X1] == Xt and
                                                                                                        uQ[2] >= 0
                                                                                                 then
                                                                                                    local Ae = uQ[2]
                                                                                                    if not sU[Ae] then
                                                                                                        (sU)[Ae] = {
                                                                                                            Xt[Ae]
                                                                                                        }
                                                                                                    end
                                                                                                    (uQ)[1] = sU[Ae]
                                                                                                    (uQ)[0X02] = 1
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    end
                                                                                end
                                                                            until true
                                                                            local zI = (Mi[0X1])
                                                                            return z(k9, zI, zI + Mi[3] - 0X2)
                                                                        else
                                                                            N9 = N9 - 0X01
                                                                            (aI)[N9] = {
                                                                                [0x3] = (Mi[0x003] - 0x00007),
                                                                                [6] = 0X4D,
                                                                                [1] = (Mi[0X1] - 0X0007)
                                                                            }
                                                                        end
                                                                    else
                                                                        local tZ = (hI[Mi[3]])
                                                                        tZ[1][tZ[2]] = k9[Mi[0X1]]
                                                                    end
                                                                else
                                                                    do
                                                                        if not (Gi >= 0X0031) then
                                                                            do
                                                                                if k9[Mi[0X3]] < k9[Mi[0X2]] then
                                                                                    do
                                                                                        N9 = Mi[1]
                                                                                    end
                                                                                end
                                                                            end
                                                                        else
                                                                            if Gi == 0x32 then
                                                                                local SQ = Mi[0X1]
                                                                                local lQ = (Mi[0x3])
                                                                                l9 = SQ + lQ - 1
                                                                                repeat
                                                                                    local kO, FO = QI, (k9)
                                                                                    if #kO > 0X0000 then
                                                                                        local oe = ({})
                                                                                        for Xx, Qx in h, kO do
                                                                                            for fc, tc in h, Qx do
                                                                                                if
                                                                                                    not (tc[0x1] == FO and
                                                                                                        tc[2] >= 0X0)
                                                                                                 then
                                                                                                else
                                                                                                    local Z6 = tc[2]
                                                                                                    if not oe[Z6] then
                                                                                                        (oe)[Z6] = {
                                                                                                            FO[Z6]
                                                                                                        }
                                                                                                    end
                                                                                                    (tc)[1] = oe[Z6]
                                                                                                    (tc)[2] = 1
                                                                                                end
                                                                                            end
                                                                                        end
                                                                                    end
                                                                                until true
                                                                                return k9[SQ](z(k9, SQ + 1, l9))
                                                                            else
                                                                                (k9)[Mi[0X01]] =
                                                                                    N(k9[Mi[3]], k9[Mi[0X2]])
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            elseif not (Gi < 0X00036) then
                                                                do
                                                                    if Gi < 0X0037 then
                                                                        (k9)[Mi[1]] = j(k9[Mi[3]], k9[Mi[0X2]])
                                                                    else
                                                                        if Gi ~= 0X38 then
                                                                            do
                                                                                k9[Mi[1]] = O(k9[Mi[3]], k9[Mi[0X002]])
                                                                            end
                                                                        else
                                                                            (k9)[Mi[1]] = D9[Mi[0X4]]
                                                                        end
                                                                    end
                                                                end
                                                            else
                                                                if not (Gi < 0X0034) then
                                                                    do
                                                                        if Gi ~= 53 then
                                                                            (k9)[Mi[0X00001]] = k9[Mi[0X3]] == k9[Mi[2]]
                                                                        else
                                                                            D9[Mi[0X4]] = k9[Mi[0X001]]
                                                                        end
                                                                    end
                                                                else
                                                                    do
                                                                        (k9[Mi[0X1]])[k9[Mi[0X3]]] = k9[Mi[0X0002]]
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        else
                            if iI ~= 0x3 then
                                qI = function(...)
                                    local ku = 0X0
                                    local pu, tu = 0X1, {}
                                    local Tu = (B and B() or _ENV)
                                    local ju, wu = (Tu == W and ZI or Tu), ({[2] = wI, [1] = tu})
                                    local su, iu = a8(...)
                                    su = su - 0x0001
                                    for tv = 0, su do
                                        if not (tI > tv) then
                                            break
                                        else
                                            (tu)[tv] = iu[tv + 1]
                                        end
                                    end
                                    if not PI then
                                        iu = nil
                                    else
                                        if not (xI) then
                                        else
                                            do
                                                tu[tI] = {n = su >= tI and su - tI + 0X1 or 0, z(iu, tI + 0X1, su + 1)}
                                            end
                                        end
                                    end
                                    if ju == Tu then
                                    elseif U then
                                        (U)(qI, ju)
                                    else
                                        _ENV = ju
                                    end
                                    repeat
                                        local Ps = aI[pu]
                                        local Qs = (Ps[0X06])
                                        pu = pu + 1
                                        do
                                            if not (Qs >= 0X7) then
                                                if Qs >= 0X00003 then
                                                    if Qs < 5 then
                                                        if Qs == 0x4 then
                                                            local fM = (jI[Ps[0x3]])
                                                            local nM = (fM[4])
                                                            local XM = (nil)
                                                            local hM = #nM
                                                            if hM > 0 then
                                                                XM = {}
                                                                for Cc = 1, hM do
                                                                    local Tc = (nM[Cc])
                                                                    do
                                                                        if Tc[0x1] == 0 then
                                                                            (XM)[Cc - 0x1] = {tu, Tc[0X2]}
                                                                        else
                                                                            XM[Cc - 0X1] = hI[Tc[0x2]]
                                                                        end
                                                                    end
                                                                end
                                                                (q)(QI, XM)
                                                            end
                                                            do
                                                                (tu)[Ps[0X1]] = c8(ju, XM, fM)
                                                            end
                                                        else
                                                            do
                                                                tu[Ps[1]] = tu[Ps[0x003]] * tu[Ps[2]]
                                                            end
                                                        end
                                                    else
                                                        if Qs == 6 then
                                                            local rg, Ug = Ps[1], ((Ps[0X2] - 1) * 0x32)
                                                            local Sg = (tu[rg])
                                                            for bD = 1, Ps[0X3] do
                                                                (Sg)[Ug + bD] = tu[rg + bD]
                                                            end
                                                        else
                                                            local kt, Jt = Ps[0x1], Ps[3]
                                                            if Jt == 0X0 then
                                                            else
                                                                do
                                                                    ku = kt + Jt - 0X01
                                                                end
                                                            end
                                                            local at, Rt, Yt = nil, nil, Ps[2]
                                                            if Jt ~= 1 then
                                                                at, Rt = a8(tu[kt](z(tu, kt + 1, ku)))
                                                            else
                                                                at, Rt = a8(tu[kt]())
                                                            end
                                                            do
                                                                if Yt ~= 1 then
                                                                    if Yt ~= 0X0 then
                                                                        at = kt + Yt - 0x0002
                                                                        ku = at + 1
                                                                    else
                                                                        at = at + kt - 1
                                                                        ku = at
                                                                    end
                                                                    local Id = (0X000)
                                                                    for KU = kt, at do
                                                                        Id = Id + 0x00001
                                                                        do
                                                                            (tu)[KU] = Rt[Id]
                                                                        end
                                                                    end
                                                                else
                                                                    ku = kt - 1
                                                                end
                                                            end
                                                        end
                                                    end
                                                else
                                                    do
                                                        if not (Qs >= 0X01) then
                                                            (tu)[0] = ju[Ps[0X04]]
                                                            local se = (0)
                                                            pu = pu + 1
                                                            pu = pu + 0X1
                                                            local Je = (nil)
                                                            do
                                                                Ps = aI[pu]
                                                            end
                                                            pu = pu + 0X01
                                                            local ve = (jI[Ps[0x3]])
                                                            local ke = (ve[4])
                                                            local Re = #ke
                                                            do
                                                                if Re > 0 then
                                                                    Je = {}
                                                                    for Kp = 1, Re do
                                                                        local ip = (ke[Kp])
                                                                        if ip[0X1] ~= 0 then
                                                                            (Je)[Kp - 0x01] = hI[ip[0x0002]]
                                                                        else
                                                                            (Je)[Kp - 1] = {tu, ip[2]}
                                                                        end
                                                                    end
                                                                    q(QI, Je)
                                                                end
                                                            end
                                                            do
                                                                (tu)[1] = c8(ju, Je, ve)
                                                            end
                                                            pu = pu + 0X001
                                                            tu[se](tu[se + 0x001])
                                                            do
                                                                ku = se - 1
                                                            end
                                                            do
                                                                pu = pu + 1
                                                            end
                                                            repeat
                                                                local kb, jb = QI, tu
                                                                if #kb > 0X00 then
                                                                    local R5 = ({})
                                                                    for YZ, eZ in h, kb do
                                                                        for pC, OC in h, eZ do
                                                                            if not (OC[0X1] == jb and OC[0X02] >= 0X0) then
                                                                            else
                                                                                local JN = (OC[0X002])
                                                                                do
                                                                                    if not (not R5[JN]) then
                                                                                    else
                                                                                        R5[JN] = {jb[JN]}
                                                                                    end
                                                                                end
                                                                                do
                                                                                    (OC)[1] = R5[JN]
                                                                                end
                                                                                do
                                                                                    (OC)[0X2] = 0X01
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            until true
                                                            return
                                                        else
                                                            if Qs ~= 0x2 then
                                                                (tu)[Ps[0X00001]] = tu[Ps[0X03]]
                                                            else
                                                                pu = Ps[0X3]
                                                            end
                                                        end
                                                    end
                                                end
                                            else
                                                do
                                                    if Qs < 0Xa then
                                                        if Qs < 0X08 then
                                                            tu[Ps[1]] = ju[Ps[4]]
                                                        else
                                                            if Qs ~= 9 then
                                                                tu[Ps[1]] = {z({}, 0X1, Ps[3])}
                                                            else
                                                                (tu)[Ps[0x00001]] = Ps[4]
                                                            end
                                                        end
                                                    else
                                                        if Qs >= 12 then
                                                            if Qs == 13 then
                                                                local GP = (Ps[1])
                                                                for I6 = GP, GP + (Ps[0X3] - 1) do
                                                                    (tu)[I6] = iu[tI + (I6 - GP) + 0X00001]
                                                                end
                                                            else
                                                            end
                                                        else
                                                            do
                                                                if Qs == 11 then
                                                                    do
                                                                        tu[Ps[1]] = j(tu[Ps[3]], tu[Ps[0X2]])
                                                                    end
                                                                else
                                                                    do
                                                                        wu[Ps[0X3]] = tu[Ps[1]]
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    until false
                                end
                            else
                                qI = function(...)
                                    local RR, VR = 0x001, ({})
                                    local YR = (B and B() or _ENV)
                                    local cR = {[1] = VR, [2] = wI}
                                    local lR, TR = a8(...)
                                    lR = lR - 1
                                    local tR = (YR == W and ZI or YR)
                                    for Xm = 0, lR do
                                        if tI > Xm then
                                            VR[Xm] = TR[Xm + 1]
                                        else
                                            break
                                        end
                                    end
                                    if not PI then
                                        TR = nil
                                    else
                                        if not (xI) then
                                        else
                                            (VR)[tI] = {n = lR >= tI and lR - tI + 1 or 0, z(TR, tI + 1, lR + 0x1)}
                                        end
                                    end
                                    local IR = 0
                                    if tR ~= YR then
                                        do
                                            if not (U) then
                                                do
                                                    _ENV = tR
                                                end
                                            else
                                                U(qI, tR)
                                            end
                                        end
                                    end
                                    while "\101S\111d\065" do
                                        local Tn = aI[RR]
                                        local nn = Tn[0X6]
                                        RR = RR + 1
                                        if not (nn < 0Xa) then
                                            do
                                                if not (nn < 0xf) then
                                                    if nn < 0X12 then
                                                        do
                                                            if nn >= 16 then
                                                                if nn ~= 0x00011 then
                                                                    (VR)[0X2] = tR[Tn[4]]
                                                                    do
                                                                        RR = RR + 0X0001
                                                                    end
                                                                    IR = 0X2
                                                                    VR[IR] = VR[IR]()
                                                                    do
                                                                        RR = RR + 1
                                                                    end
                                                                    do
                                                                        VR[3] = VR[1]
                                                                    end
                                                                    Tn = aI[RR]
                                                                    do
                                                                        RR = RR + 1
                                                                    end
                                                                    VR[2][Tn[0X4]] = VR[3]
                                                                    Tn = aI[RR]
                                                                    RR = RR + 0X01
                                                                    RR = Tn[0x00003]
                                                                else
                                                                    VR[Tn[1]] = O(VR[Tn[3]], VR[Tn[2]])
                                                                end
                                                            else
                                                                RR = Tn[3]
                                                            end
                                                        end
                                                    else
                                                        if not (nn >= 19) then
                                                            do
                                                                (VR)[0X2] = tR[Tn[0x00004]]
                                                            end
                                                            RR = RR + 1
                                                            IR = 0x02
                                                            VR[IR] = VR[IR]()
                                                            RR = RR + 0X0001
                                                            do
                                                                RR = RR + 0X1
                                                            end
                                                            Tn = aI[RR]
                                                            RR = RR + 0X001
                                                            if VR[2] == Tn[7] then
                                                                RR = Tn[0X1]
                                                            end
                                                        else
                                                            if nn ~= 20 then
                                                                do
                                                                    for Gg = Tn[1], Tn[0X3] do
                                                                        VR[Gg] = nil
                                                                    end
                                                                end
                                                            else
                                                                VR[Tn[0X001]] = VR[Tn[0X0003]] - VR[Tn[2]]
                                                            end
                                                        end
                                                    end
                                                else
                                                    if not (nn < 12) then
                                                        do
                                                            if not (nn < 0x00D) then
                                                                if nn == 0Xe then
                                                                    VR[Tn[0X1]] = #VR[Tn[3]]
                                                                else
                                                                    local Ee = jI[Tn[0X3]]
                                                                    local Ge = nil
                                                                    local fe = (Ee[0X004])
                                                                    local Fe = (#fe)
                                                                    if Fe > 0 then
                                                                        Ge = {}
                                                                        for Qf = 1, Fe do
                                                                            local ef = (fe[Qf])
                                                                            if ef[1] == 0x00 then
                                                                                (Ge)[Qf - 0X1] = {VR, ef[2]}
                                                                            else
                                                                                Ge[Qf - 1] = hI[ef[0X02]]
                                                                            end
                                                                        end
                                                                        q(QI, Ge)
                                                                    end
                                                                    VR[Tn[1]] = c8(tR, Ge, Ee)
                                                                end
                                                            else
                                                                repeat
                                                                    local Cs, Ps = QI, (VR)
                                                                    if not (#Cs > 0x00) then
                                                                    else
                                                                        local H1 = ({})
                                                                        do
                                                                            for z_, v_ in h, Cs do
                                                                                for k5, N5 in h, v_ do
                                                                                    if N5[0x1] == Ps and N5[0x2] >= 0 then
                                                                                        local Wd = (N5[0x2])
                                                                                        if not H1[Wd] then
                                                                                            (H1)[Wd] = {Ps[Wd]}
                                                                                        end
                                                                                        N5[1] = H1[Wd]
                                                                                        N5[0x2] = 1
                                                                                    end
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                until true
                                                                return
                                                            end
                                                        end
                                                    else
                                                        if nn ~= 11 then
                                                            VR[Tn[1]] = Tn[0X4]
                                                        else
                                                            do
                                                                VR[Tn[1]] = X(VR[Tn[3]])
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        elseif not (nn < 0x00005) then
                                            if nn >= 0X7 then
                                                if not (nn >= 8) then
                                                    VR[Tn[0X0001]] = tR[Tn[0X04]]
                                                else
                                                    if nn == 0X0009 then
                                                        VR[Tn[1]] = j(VR[Tn[3]], VR[Tn[2]])
                                                    else
                                                        if not (VR[Tn[0X3]] <= VR[Tn[0x2]]) then
                                                            RR = Tn[1]
                                                        end
                                                    end
                                                end
                                            else
                                                if nn ~= 0x6 then
                                                    VR[Tn[0X1]] = VR[Tn[3]] % VR[Tn[2]]
                                                else
                                                    (VR)[0x00002] = tR[Tn[0x4]]
                                                    RR = RR + 0x001
                                                    IR = 0X2
                                                    VR[IR] = VR[IR]()
                                                    do
                                                        RR = RR + 1
                                                    end
                                                    RR = RR + 0X001
                                                    RR = RR + 1
                                                    (VR)[0X3] = VR[1]
                                                    Tn = aI[RR]
                                                    do
                                                        RR = RR + 0X1
                                                    end
                                                    (VR[0X00002])[Tn[4]] = VR[0X3]
                                                    Tn = aI[RR]
                                                    do
                                                        RR = RR + 0x1
                                                    end
                                                    do
                                                        RR = Tn[0X0003]
                                                    end
                                                end
                                            end
                                        else
                                            if not (nn < 2) then
                                                if not (nn >= 0X3) then
                                                    if not (VR[Tn[0X3]] < VR[Tn[0X2]]) then
                                                        RR = Tn[1]
                                                    end
                                                else
                                                    if nn ~= 4 then
                                                        local iq, Iq = Tn[0X00001], (Tn[0X2] - 1) * 50
                                                        local Xq = (VR[iq])
                                                        for bi = 1, Tn[3] do
                                                            do
                                                                Xq[Iq + bi] = VR[iq + bi]
                                                            end
                                                        end
                                                    else
                                                        do
                                                            VR[0X0] = tR[Tn[0x4]]
                                                        end
                                                        do
                                                            RR = RR + 1
                                                        end
                                                        local HG = hI[0]
                                                        (VR)[1] = HG[0X01][HG[2]]
                                                        Tn = aI[RR]
                                                        RR = RR + 1
                                                        VR[0X1] = VR[1][Tn[0X0007]]
                                                        RR = RR + 1
                                                        HG = hI[0]
                                                        do
                                                            VR[2] = HG[0X1][HG[2]]
                                                        end
                                                        RR = RR + 1
                                                        RR = RR + 1
                                                        local cG = (0X000)
                                                        Tn = aI[RR]
                                                        RR = RR + 0X1
                                                        (VR)[0x002] = VR[2][Tn[0X7]]
                                                        RR = RR + 1
                                                        (VR)[cG] = VR[cG](VR[cG + 1], VR[cG + 0X2])
                                                        IR = cG
                                                        do
                                                            RR = RR + 0X1
                                                        end
                                                        (VR)[0X1] = VR[0]
                                                        Tn = aI[RR]
                                                        do
                                                            RR = RR + 1
                                                        end
                                                        VR[0X2] = tR[Tn[4]]
                                                        RR = RR + 1
                                                        IR = 2
                                                        VR[IR] = VR[IR]()
                                                        RR = RR + 0x1
                                                        do
                                                            RR = RR + 1
                                                        end
                                                        Tn = aI[RR]
                                                        RR = RR + 1
                                                        do
                                                            if VR[2] ~= Tn[7] then
                                                            else
                                                                RR = Tn[0x1]
                                                            end
                                                        end
                                                    end
                                                end
                                            else
                                                if nn ~= 1 then
                                                else
                                                    do
                                                        VR[Tn[1]] = {z({}, 1, Tn[0X0003])}
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        if not (U) then
                        else
                            U(qI, ZI)
                        end
                        do
                            return qI
                        end
                    end
                    do
                        break
                    end
                end
            end
        until false
    end
    local I = (assert)
    x8 = 0X2
    local o8, R8 = nil, nil
    repeat
        if x8 <= 1 then
            if x8 ~= 0X0 then
                n8 = nil
                x8 = 0X4
            else
                do
                    R8 = o8()
                end
                x8 = 0X03
            end
        elseif not (x8 <= 2) then
            do
                if x8 ~= 0X3 then
                    return c8(W, L8, R8)(...)
                else
                    do
                        E8[0x0002] = n8
                    end
                    do
                        x8 = 0X00001
                    end
                end
            end
        else
            function o8()
                local CM, HM, dM = nil, nil, nil
                for d9 = 0, 0X03 do
                    if not (d9 <= 1) then
                        do
                            if d9 == 2 then
                                HM = {{}, L8, {}, nil, {}, L8, L8, L8, nil}
                            else
                                dM = {}
                            end
                        end
                    else
                        if d9 ~= 0 then
                            do
                                CM = {}
                            end
                        else
                        end
                    end
                end
                local GM = 1
                repeat
                    if GM <= 0X000 then
                        HM[0X12] = G()
                        do
                            GM = 0X2
                        end
                    else
                        if GM == 1 then
                            do
                                (HM)[13] = D()
                            end
                            GM = 0x000
                        else
                            (HM)[14] = G()
                            break
                        end
                    end
                until (false)
                local EM = (HM[0X3])
                do
                    GM = 0X000
                end
                local TM = nil
                while GM ~= 0X2 do
                    if GM ~= 0X0 then
                        for CY = 0x0, TM - 0x1 do
                            EM[CY] = o8()
                        end
                        GM = 2
                    else
                        TM = D() - 0xbAb6
                        GM = 0X1
                    end
                end
                local KM = HM[1]
                GM = 0X0000A
                local WM, xM = nil, nil
                repeat
                    if GM <= 5 then
                        if not (GM <= 0X0002) then
                            do
                                if not (GM <= 0X3) then
                                    if GM == 0X04 then
                                        for Dm = 1, WM do
                                            (KM)[Dm] = {
                                                [1] = V(),
                                                [5] = G(),
                                                [0X6] = x(),
                                                [0X3] = V(),
                                                [0X2] = V(),
                                                [0X4] = G(),
                                                [e8] = G()
                                            }
                                        end
                                        GM = 8
                                    else
                                        HM[0x0000D] = G()
                                        do
                                            GM = 11
                                        end
                                    end
                                else
                                    for Hb = 0x1, x() do
                                        (CM)[Hb] = {G(), x()}
                                    end
                                    GM = 0X6
                                end
                            end
                        else
                            if GM <= 0X0 then
                                (HM)[0XE] = G()
                                do
                                    GM = 13
                                end
                            else
                                if GM ~= 0X1 then
                                    HM[4] = CM
                                    GM = 0x3
                                else
                                    do
                                        HM[18] = D()
                                    end
                                    GM = 0X9
                                end
                            end
                        end
                    else
                        if not (GM <= 8) then
                            do
                                if not (GM <= 0x000A) then
                                    if GM == 0xb then
                                        xM = 0X1
                                        GM = 0Xc
                                    else
                                        do
                                            (HM)[18] = G()
                                        end
                                        GM = 0x0001
                                    end
                                else
                                    if GM ~= 0X9 then
                                        WM = D() - 0X0000963B
                                        do
                                            GM = 4
                                        end
                                    else
                                        (HM)[0X2] = x()
                                        GM = 0
                                    end
                                end
                            end
                        else
                            do
                                if GM <= 0X6 then
                                    HM[0Xe] = D()
                                    do
                                        GM = 5
                                    end
                                else
                                    if GM ~= 0X7 then
                                        HM[e8] = x()
                                        GM = 7
                                    else
                                        HM[12] = G()
                                        do
                                            GM = 0X0002
                                        end
                                    end
                                end
                            end
                        end
                    end
                until GM == 13
                local PM = nil
                for uH = 0X0, 1 do
                    if uH ~= 0X0 then
                        PM = G()
                    else
                        HM[0X6] = x()
                    end
                end
                GM = 0
                local VM = nil
                repeat
                    if GM == 0X0 then
                        VM = {}
                        GM = 0x1
                    else
                        HM[9] = m(PM, 1, 1) ~= 0X0
                        GM = 0x002
                    end
                until GM > 0X1
                GM = 0
                local BM, uM = nil, (nil)
                while GM ~= 4 do
                    do
                        if not (GM <= 1) then
                            if GM ~= 2 then
                                HM[15] = D()
                                GM = 1
                            else
                                do
                                    uM = G()
                                end
                                GM = 4
                            end
                        else
                            do
                                if GM ~= 0 then
                                    do
                                        BM = D() - 36063
                                    end
                                    GM = 2
                                else
                                    (HM)[0X8] = m(PM, 0X00002, 1) ~= 0x0
                                    do
                                        GM = 3
                                    end
                                end
                            end
                        end
                    end
                end
                GM = 0X2
                local AM = (nil)
                while GM <= 0X00002 do
                    if not (GM <= 0X0) then
                        if GM ~= 0X1 then
                            AM = G() ~= 0X0
                            do
                                GM = 0
                            end
                        else
                            do
                                for QR = 1, WM do
                                    local qR = (nil)
                                    for hy = 0x0, 1 do
                                        if hy == 0 then
                                            qR = HM[1][QR]
                                        else
                                            do
                                                for w7, K7 in ipairs(P) do
                                                    local J7 = u[K7]
                                                    local T7 = (qR[J7])
                                                    if T7 == 11 then
                                                        local md, sd, zd = 0X1, nil, nil
                                                        while (true) do
                                                            if not (md <= 0) then
                                                                if md == 0x001 then
                                                                    sd = VM[qR[K7]]
                                                                    md = 0
                                                                else
                                                                    if zd then
                                                                        local X7, a7 = 0x0002, (nil)
                                                                        do
                                                                            while (true) do
                                                                                if not (X7 <= 0x0) then
                                                                                    if X7 ~= 0X00001 then
                                                                                        do
                                                                                            (qR)[J7] = zd[D8]
                                                                                        end
                                                                                        X7 = 0
                                                                                    else
                                                                                        (a7)[#a7 + 1] = {qR, J7}
                                                                                        break
                                                                                    end
                                                                                else
                                                                                    a7 = zd[0X2]
                                                                                    X7 = 0X1
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                    break
                                                                end
                                                            else
                                                                zd = dM[sd]
                                                                do
                                                                    md = 2
                                                                end
                                                            end
                                                        end
                                                    elseif T7 ~= 14 then
                                                    else
                                                        qR[K7] = QR + qR[K7] + 1
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                            do
                                GM = 3
                            end
                        end
                    else
                        for q1 = 0X1, BM do
                            local z1 = (G())
                            local A1, C1 = nil, (nil)
                            do
                                for UD = 0X0, 0X6 do
                                    do
                                        if UD <= 2 then
                                            if UD <= 0X0 then
                                                A1 = nil
                                            else
                                                if UD == 0X1 then
                                                    do
                                                        VM[q1 - 1] = xM
                                                    end
                                                else
                                                    if z1 == 18 then
                                                        A1 = o(M8(uM), S() + D())
                                                    elseif z1 == 0X16 then
                                                        A1 = S()
                                                    elseif z1 == 192 then
                                                        do
                                                            A1 = o(M8(uM), G())
                                                        end
                                                    elseif z1 == 207 then
                                                        A1 = D()
                                                    elseif z1 == 0x7D then
                                                        A1 = o(M8(uM), 0X3)
                                                    elseif z1 == 0X48 then
                                                        A1 = S() + D()
                                                    elseif z1 == 237 then
                                                        A1 = o(M8(uM), 0X14)
                                                    elseif z1 == 68 then
                                                        A1 = true
                                                    elseif z1 == P8 then
                                                        do
                                                            A1 = C()
                                                        end
                                                    elseif z1 == u8 then
                                                        A1 = false
                                                    end
                                                end
                                            end
                                        else
                                            if UD <= 4 then
                                                do
                                                    if UD == 0X03 then
                                                        do
                                                            C1 = {A1, {}}
                                                        end
                                                    else
                                                        (dM)[xM] = C1
                                                    end
                                                end
                                            else
                                                if UD ~= 0X00005 then
                                                    if AM then
                                                        local Bw = (0)
                                                        while Bw < 0X0002 do
                                                            if Bw ~= 0 then
                                                                f8 = f8 + 0X1
                                                                do
                                                                    Bw = 0X00002
                                                                end
                                                            else
                                                                (n8)[f8] = C1
                                                                Bw = 0X1
                                                            end
                                                        end
                                                    end
                                                else
                                                    xM = xM + 0X1
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        GM = 1
                    end
                end
                do
                    return HM
                end
            end
            x8 = 0X0
        end
    until false
end)(
    8,
    string.byte,
    "..",
    table.unpack,
    0XD3,
    0X1f3D,
    0Xc,
    nil,
    0X4,
    3,
    tonumber,
    "b\110o\116",
    pcall,
    7,
    1,
    setmetatable,
    string,
    15,
    4294967296,
    "l\115h\105f\116",
    0X14,
    type,
    string.match,
    9,
    select,
    0Xb8,
    next,
    0X2,
    0x0100,
    error,
    0X6,
    0x5,
    "\114s\104\105f\116",
    0XdF,
    0Xe,
    "\035",
    10,
    0X0,
    0X0001F,
    {0x001412, 2834192281, 4221568885, 1162625589, 2342819624, 0X0005b7647Ef, 0XA076Fc5, 0X00b6e5D996, 0X8e3C7b24},
    ...
)
